// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = "33.0.0"
        minSdkVersion = 24
        compileSdkVersion = 33
        targetSdkVersion = 33
        kotlinVersion = "1.7.20"
        
        // Especificar Java 11 para compatibilidad
        javaVersion = JavaVersion.VERSION_11
        
        ndkVersion = "25.1.8937393"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:7.4.2")
        classpath("com.facebook.react:react-native-gradle-plugin")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
    }
}

apply plugin: "com.facebook.react.rootproject"

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url(new File(['node', '--print', "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), '../android'))
        }
        maven {
            // Android JSC is installed from npm
            url(new File(['node', '--print', "require.resolve('jsc-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), '../dist'))
        }

        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
    }
}
// @generated begin expo-camera-import - expo prebuild (DO NOT MODIFY) sync-f244f4f3d8bf7229102e8f992b525b8602c74770
def expoCameraMavenPath = new File(["node", "--print", "require.resolve('expo-camera/package.json')"].execute(null, rootDir).text.trim(), "../android/maven")
allprojects { repositories { maven { url(expoCameraMavenPath) } } }
// @generated end expo-camera-import

// Configuración para manejar problemas de compatibilidad de Kotlin
subprojects {
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                compileOptions {
                    sourceCompatibility rootProject.ext.javaVersion
                    targetCompatibility rootProject.ext.javaVersion
                }
                
                kotlinOptions {
                    jvmTarget = rootProject.ext.javaVersion.toString()
                    freeCompilerArgs += [
                        "-Xskip-metadata-version-check",
                        "-Xsuppress-version-warnings"
                    ]
                }
            }
        }
        
        // Forzar la versión de Kotlin para todas las dependencias
        project.configurations.all {
            resolutionStrategy.eachDependency { details ->
                if (details.requested.group == "org.jetbrains.kotlin") {
                    details.useVersion rootProject.ext.kotlinVersion
                }
            }
        }
    }
}